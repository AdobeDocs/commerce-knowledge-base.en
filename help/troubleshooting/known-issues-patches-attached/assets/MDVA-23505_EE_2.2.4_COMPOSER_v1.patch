diff --git a/vendor/magento/module-catalog-staging/Controller/Adminhtml/Category/Update/Delete.php b/vendor/magento/module-catalog-staging/Controller/Adminhtml/Category/Update/Delete.php
index 4c09461da3e..bfdc758a896 100644
--- a/vendor/magento/module-catalog-staging/Controller/Adminhtml/Category/Update/Delete.php
+++ b/vendor/magento/module-catalog-staging/Controller/Adminhtml/Category/Update/Delete.php
@@ -8,6 +8,7 @@ namespace Magento\CatalogStaging\Controller\Adminhtml\Category\Update;
 
 use Magento\Backend\App\Action;
 use Magento\Staging\Model\Entity\Update\Delete as StagingUpdateDelete;
+use Magento\Staging\Model\VersionManager;
 
 class Delete extends Action
 {
@@ -52,6 +53,11 @@ class Delete extends Action
      */
     public function execute()
     {
+        $mode = $this->getRequest()->getParam('staging')['mode'];
+	        if ($mode === 'remove') {
+	            $this->addVersionToRequest();
+	        }
+
         return $this->stagingUpdateDelete->execute(
             [
                 'entityId' => $this->getRequest()->getParam(static::ENTITY_IDENTIFIER),
@@ -60,4 +66,20 @@ class Delete extends Action
             ]
         );
     }
+
+    /**
+     * Add update version to request params to prevent deleting all catalog category sequence when
+     * a scheduled update is currently active.
+     *
+     * @return void
+     */
+    private function addVersionToRequest()
+    {
+        $requestParams = $this->getRequest()->getParams();
+
+        $requestParams[VersionManager::PARAM_NAME]
+            = $this->getRequest()->getParam('update_id');
+
+        $this->getRequest()->setParams($requestParams);
+    }
 }
diff --git a/vendor/magento/module-staging/Model/Operation/Delete.php b/vendor/magento/module-staging/Model/Operation/Delete.php
index 0fad691bcbe..bcbf5d4492f 100644
--- a/vendor/magento/module-staging/Model/Operation/Delete.php
+++ b/vendor/magento/module-staging/Model/Operation/Delete.php
@@ -141,7 +141,7 @@ class Delete implements DeleteInterface
             $this->deleteMain->execute($entity, $arguments);
             $this->updateIntersectedUpdates->execute($entity);
 
-            if (!$this->versionManager->isPreviewVersion()) {
+            if (!$this->versionManager->isPreviewVersion() && !$this->isUnscheduleOperation($arguments)) {
                 $this->sequenceManager->delete($entityType, $entityData[$metadata->getIdentifierField()]);
             }
             $this->eventManager->dispatchEntityEvent($entityType, 'delete_after', ['entity' => $entity]);
@@ -159,4 +159,18 @@ class Delete implements DeleteInterface
         }
         return true;
     }
+
+    /**
+     * Checks whether we try to unschedule scheduled update or delete whole entity.
+     *
+     * Needs to prevent deleting original entity when the scheduled update
+     * is currently active and should be removed.
+     *
+     * @param array $arguments
+     * @return bool
+     */
+    private function isUnscheduleOperation(array $arguments): bool
+    {
+        return array_key_exists('created_in', $arguments);
+    }
 }
diff --git a/vendor/magento/module-staging/Model/VersionManager.php b/vendor/magento/module-staging/Model/VersionManager.php
index aa61d325f4d..fe20e06bfa6 100644
--- a/vendor/magento/module-staging/Model/VersionManager.php
+++ b/vendor/magento/module-staging/Model/VersionManager.php
@@ -129,14 +129,8 @@ class VersionManager
      */
     public function getRequestedTimestamp()
     {
-        if ($this->requestedTimestamp) {
-            return $this->requestedTimestamp;
-        }
-
-        $requestedTimestamp = $this->request->getParam(self::PARAM_NAME);
-
-        if ($requestedTimestamp) {
-            $this->requestedTimestamp = $requestedTimestamp;
+        if (!$this->requestedTimestamp) {
+            $this->requestedTimestamp = (int)$this->request->getParam(self::PARAM_NAME);
         }
 
         return $this->requestedTimestamp;
