diff --git a/vendor/magento/module-checkout/etc/frontend/sections.xml b/vendor/magento/module-checkout/etc/frontend/sections.xml
index 90c2878f501..2427890c066 100644
--- a/vendor/magento/module-checkout/etc/frontend/sections.xml
+++ b/vendor/magento/module-checkout/etc/frontend/sections.xml
@@ -9,6 +9,7 @@
         xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Customer:etc/sections.xsd">
     <action name="checkout/cart/add">
         <section name="cart"/>
+        <section name="directory-data"/>
     </action>
     <action name="checkout/cart/delete">
         <section name="cart"/>
diff --git a/vendor/magento/module-checkout/view/frontend/web/js/model/cart/totals-processor/default.js b/vendor/magento/module-checkout/view/frontend/web/js/model/cart/totals-processor/default.js
index 0e94232786c..d8fea6ea329 100644
--- a/vendor/magento/module-checkout/view/frontend/web/js/model/cart/totals-processor/default.js
+++ b/vendor/magento/module-checkout/view/frontend/web/js/model/cart/totals-processor/default.js
@@ -87,17 +87,7 @@ define([
                 data.shippingCarrierCode = quote.shippingMethod()['carrier_code'];
             }
 
-            if (!cartCache.isChanged('cartVersion', customerData.get('cart')()['data_id']) &&
-                !cartCache.isChanged('shippingMethodCode', data.shippingMethodCode) &&
-                !cartCache.isChanged('shippingCarrierCode', data.shippingCarrierCode) &&
-                !cartCache.isChanged('address', address) &&
-                cartCache.get('totals') &&
-                !cartCache.isChanged('subtotal', parseFloat(quote.totals().subtotal))
-            ) {
-                quote.setTotals(cartCache.get('totals'));
-            } else {
-                return loadFromServer(address);
-            }
+            return loadFromServer(address);
         }
     };
 });
diff --git a/vendor/magento/module-checkout/view/frontend/web/js/view/minicart.js b/vendor/magento/module-checkout/view/frontend/web/js/view/minicart.js
index 5e29fa209a6..4adc1cd88c0 100644
--- a/vendor/magento/module-checkout/view/frontend/web/js/view/minicart.js
+++ b/vendor/magento/module-checkout/view/frontend/web/js/view/minicart.js
@@ -102,8 +102,9 @@ define([
                 self.isLoading(true);
             });
 
-            if (cartData().website_id !== window.checkout.websiteId ||
-                cartData().store_id !== window.checkout.storeId
+            if (
+                cartData().website_id !== window.checkout.websiteId && cartData().website_id !== undefined ||
+                cartData().storeId !== window.checkout.storeId && cartData().storeId !== undefined
             ) {
                 customerData.reload(['cart'], false);
             }
diff --git a/vendor/magento/module-customer/Block/SectionNamesProvider.php b/vendor/magento/module-customer/Block/SectionNamesProvider.php
new file mode 100644
index 00000000000..c538f346860
--- /dev/null
+++ b/vendor/magento/module-customer/Block/SectionNamesProvider.php
@@ -0,0 +1,41 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Customer\Block;
+
+use Magento\Customer\CustomerData\SectionPool;
+use Magento\Framework\View\Element\Block\ArgumentInterface;
+
+/**
+ * ViewModel to get sections names array.
+ */
+class SectionNamesProvider implements ArgumentInterface
+{
+    /**
+     * @var SectionPool
+     */
+    private $sectionPool;
+
+    /**
+     * @param SectionPool $sectionPool
+     */
+    public function __construct(
+        SectionPool $sectionPool
+    )
+    {
+        $this->sectionPool = $sectionPool;
+    }
+
+    /**
+     * Return array of section names based on config.
+     *
+     * @return array
+     */
+    public function getSectionNames()
+    {
+        return $this->sectionPool->getSectionNames();
+    }
+}
\ No newline at end of file
diff --git a/vendor/magento/module-customer/CustomerData/SectionPool.php b/vendor/magento/module-customer/CustomerData/SectionPool.php
index be5ea09c0db..e3fb7b216ca 100644
--- a/vendor/magento/module-customer/CustomerData/SectionPool.php
+++ b/vendor/magento/module-customer/CustomerData/SectionPool.php
@@ -81,6 +81,16 @@ class SectionPool implements SectionPoolInterface
         return $data;
     }
 
+    /**
+     * Return array of section names.
+     *
+     * @return array
+     */
+    public function getSectionNames()
+    {
+        return array_keys($this->sectionSourceMap);
+    }
+
     /**
      * Get all section sources
      *
diff --git a/vendor/magento/module-customer/etc/di.xml b/vendor/magento/module-customer/etc/di.xml
index c6e383fb73b..16f2b9d85d5 100644
--- a/vendor/magento/module-customer/etc/di.xml
+++ b/vendor/magento/module-customer/etc/di.xml
@@ -159,6 +159,11 @@
     </type>
     <preference for="Magento\Customer\CustomerData\JsLayoutDataProviderPoolInterface"
                 type="Magento\Customer\CustomerData\JsLayoutDataProviderPool"/>
+    <type name="Magento\Customer\Block\SectionNamesProvider">
+         <arguments>
+             <argument name="sectionConfig" xsi:type="object">SectionInvalidationConfigData</argument>
+         </arguments>
+    </type>
     <type name="Magento\Eav\Model\EavCustomAttributeTypeLocator">
         <arguments>
             <argument name="serviceEntityTypeMap" xsi:type="array">
diff --git a/vendor/magento/module-customer/view/frontend/layout/default.xml b/vendor/magento/module-customer/view/frontend/layout/default.xml
index 94e46fda194..3976fc6bd90 100644
--- a/vendor/magento/module-customer/view/frontend/layout/default.xml
+++ b/vendor/magento/module-customer/view/frontend/layout/default.xml
@@ -41,9 +41,12 @@
                 </arguments>
             </block>
             <block name="customer.section.config" class="Magento\Customer\Block\SectionConfig"
-                   template="Magento_Customer::js/section-config.phtml"/>
-            <block name="customer.customer.data"
-                   class="Magento\Customer\Block\CustomerData"
+                   template="Magento_Customer::js/section-config.phtml">
+                <arguments>
+                    <argument name="sectionNamesProvider" xsi:type="object">Magento\Customer\Block\SectionNamesProvider</argument>
+                </arguments>
+            </block>
+            <block name="customer.customer.data"  class="Magento\Customer\Block\CustomerData"
                    template="Magento_Customer::js/customer-data.phtml"/>
             <block name="customer.data.invalidation.rules" class="Magento\Customer\Block\CustomerScopeData"
                    template="Magento_Customer::js/customer-data/invalidation-rules.phtml"/>
diff --git a/vendor/magento/module-customer/view/frontend/templates/js/section-config.phtml b/vendor/magento/module-customer/view/frontend/templates/js/section-config.phtml
index 94ab4757898..c4fd7c1aef9 100644
--- a/vendor/magento/module-customer/view/frontend/templates/js/section-config.phtml
+++ b/vendor/magento/module-customer/view/frontend/templates/js/section-config.phtml
@@ -15,6 +15,7 @@
                 $block->getUrl(null, ['_secure' => true]),
                 $block->getUrl(null, ['_secure' => false]),
             ]),
+            "sectionNames" => $block->getData('sectionNamesProvider')->getSectionNames()
         ]],
     ]);
 ?>
diff --git a/vendor/magento/module-customer/view/frontend/web/js/customer-data.js b/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
index 66d37cb84e9..a0bf8d053b5 100644
--- a/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
+++ b/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
@@ -11,12 +11,13 @@ define([
     'underscore',
     'ko',
     'Magento_Customer/js/section-config',
+    'mage/url',
     'mage/storage',
     'jquery/jquery-storageapi'
-], function ($, _, ko, sectionConfig) {
+], function ($, _, ko, sectionConfig, url) {
     'use strict';
 
-    var options,
+    var options = {},
         storage,
         storageInvalidation,
         invalidateCacheBySessionTimeOut,
@@ -25,6 +26,9 @@ define([
         buffer,
         customerData;
 
+    url.setBaseUrl(window.BASE_URL);
+    options.sectionLoadUrl = url.build('customer/section/load');
+
     //TODO: remove global change, in this case made for initNamespaceStorage
     $.cookieStorage.setConf({
         path: '/',
@@ -194,34 +198,9 @@ define([
          * Customer data initialization
          */
         init: function () {
-            var countryData,
-                privateContentVersion = 'private_content_version',
-                privateContent = $.cookieStorage.get(privateContentVersion),
-                localPrivateContent = $.localStorage.get(privateContentVersion),
-                needVersion = 'need_version',
-                expiredSectionNames = this.getExpiredSectionNames(),
-                isLoading = false;
-
-            if (privateContent &&
-                !$.cookieStorage.isSet(privateContentVersion) &&
-                !$.localStorage.isSet(privateContentVersion)
-            ) {
-                $.cookieStorage.set(privateContentVersion, needVersion);
-                $.localStorage.set(privateContentVersion, needVersion);
-                this.reload([], false);
-                isLoading = true;
-            } else if (localPrivateContent !== privateContent) {
-                if (!$.cookieStorage.isSet(privateContentVersion)) {
-                    privateContent = needVersion;
-                    $.cookieStorage.set(privateContentVersion, privateContent);
-                }
-                $.localStorage.set(privateContentVersion, privateContent);
-                _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
-                    buffer.notify(sectionName, sectionData);
-                });
-                this.reload([], false);
-                isLoading = true;
-            } else if (expiredSectionNames.length > 0) {
+            var expiredSectionNames = this.getExpiredSectionNames();
+
+            if (expiredSectionNames.length > 0) {
                 _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
                     buffer.notify(sectionName, sectionData);
                 });
@@ -235,14 +214,6 @@ define([
                     this.reload(storageInvalidation.keys(), false);
                 }
             }
-
-            if (!_.isEmpty(privateContent)) {
-                countryData = this.get('directory-data');
-
-                if (_.isEmpty(countryData()) && !isLoading) {
-                    customerData.reload(['directory-data'], false);
-                }
-            }
         },
 
         /**
@@ -328,6 +299,9 @@ define([
         },
 
         /**
+         * Avoid using this function directly 'cause of possible performance drawbacks.
+         * Each customer section reload brings new non-cached ajax request.
+         *
          * @param {Array} sectionNames
          * @param {Boolean} forceNewSectionTimestamp
          * @return {*}
@@ -346,7 +320,9 @@ define([
             var sectionDataIds,
                 sectionsNamesForInvalidation;
 
-            sectionsNamesForInvalidation = _.contains(sectionNames, '*') ? buffer.keys() : sectionNames;
+            sectionsNamesForInvalidation = _.contains(sectionNames, '*') ? sectionConfig.getSectionNames() :
+                sectionNames;
+
             $(document).trigger('customer-data-invalidate', [sectionsNamesForInvalidation]);
             buffer.remove(sectionsNamesForInvalidation);
             sectionDataIds = $.cookieStorage.get('section_data_ids') || {};
@@ -410,4 +386,4 @@ define([
     });
 
     return customerData;
-});
+});
\ No newline at end of file
diff --git a/vendor/magento/module-customer/view/frontend/web/js/section-config.js b/vendor/magento/module-customer/view/frontend/web/js/section-config.js
index 76fe7f2515a..d346d5b0707 100644
--- a/vendor/magento/module-customer/view/frontend/web/js/section-config.js
+++ b/vendor/magento/module-customer/view/frontend/web/js/section-config.js
@@ -6,7 +6,7 @@
 define(['underscore'], function (_) {
     'use strict';
 
-    var baseUrls, sections, clientSideSections, canonize;
+    var baseUrls, sections, clientSideSections, sectionNames, canonize;
 
     /**
      * @param {String} url
@@ -70,6 +70,15 @@ define(['underscore'], function (_) {
             return _.contains(clientSideSections, sectionName);
         },
 
+        /**
+         * Returns array of section names.
+         *
+         * @returns {Array}
+         */
+        getSectionNames: function () {
+            return sectionNames;
+        },
+
         /**
          * @param {Object} options
          * @constructor
@@ -78,6 +87,7 @@ define(['underscore'], function (_) {
             baseUrls = options.baseUrls;
             sections = options.sections;
             clientSideSections = options.clientSideSections;
+            sectionNames = options.sectionNames;
         }
     };
 });
diff --git a/vendor/magento/module-persistent/etc/frontend/sections.xml b/vendor/magento/module-persistent/etc/frontend/sections.xml
index 16b44c502fc..7466fbe990b 100644
--- a/vendor/magento/module-persistent/etc/frontend/sections.xml
+++ b/vendor/magento/module-persistent/etc/frontend/sections.xml
@@ -10,4 +10,7 @@
     <action name="persistent/index/unsetCookie">
         <section name="persistent"/>
     </action>
+    <action name="customer/account/logout">
+        <section name="persistent"/>
+    </action>
 </config>
diff --git a/vendor/magento/module-store/Model/StoreSwitcher/ManagePrivateContent.php b/vendor/magento/module-store/Model/StoreSwitcher/ManagePrivateContent.php
index 4ef5aad5d79..5fde0f8e5ff 100644
--- a/vendor/magento/module-store/Model/StoreSwitcher/ManagePrivateContent.php
+++ b/vendor/magento/module-store/Model/StoreSwitcher/ManagePrivateContent.php
@@ -53,7 +53,7 @@ class ManagePrivateContent implements StoreSwitcherInterface
                 ->setHttpOnly(false);
             $this->cookieManager->setPublicCookie(
                 \Magento\Framework\App\PageCache\Version::COOKIE_NAME,
-                'should_be_updated',
+                \uniqid('updated-', true),
                 $publicCookieMetadata
             );
         } catch (\Exception $e) {
diff --git a/vendor/magento/module-banner/view/frontend/web/js/model/banner.js b/vendor/magento/module-banner/view/frontend/web/js/model/banner.js
index 2c483a58d93..5d537a624c4 100644
--- a/vendor/magento/module-banner/view/frontend/web/js/model/banner.js
+++ b/vendor/magento/module-banner/view/frontend/web/js/model/banner.js
@@ -25,14 +25,10 @@ define([
          * Cache invalidation
          */
         invalidateCacheBySessionTimeOut = function () {
-            var customerDataVersion = customerData.get('customer')()['data_id'],
-                cacheEol = new Date($.localStorage.get('mage-banners-cache-timeout')),
+            var cacheEol = new Date($.localStorage.get('mage-banners-cache-timeout')),
                 dateTo = new Date(Date.now() + options.cacheTtl);
 
-            if (cacheEol < new Date() ||
-                !customerDataVersion ||
-                cacheEol - new Date(customerDataVersion * 1000 < options.cacheTtl)
-            ) {
+            if (cacheEol < new Date()) {
                 storage.removeAll();
                 $.localStorage.set('mage-banners-cache-timeout', dateTo);
             }
