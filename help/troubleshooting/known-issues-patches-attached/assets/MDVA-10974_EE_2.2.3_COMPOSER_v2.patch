diff --git a/vendor/magento/module-staging/Model/Operation/Update.php b/vendor/magento/module-staging/Model/Operation/Update.php
index 12ee8c6993..e77aca225e 100644
--- a/vendor/magento/module-staging/Model/Operation/Update.php
+++ b/vendor/magento/module-staging/Model/Operation/Update.php
@@ -3,6 +3,7 @@
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
+
 namespace Magento\Staging\Model\Operation;
 
 use Magento\Framework\EntityManager\EntityMetadataInterface;
@@ -235,7 +236,7 @@ class Update implements UpdateInterface
     private function createRollback(UpdateInfo $update, VersionInfo $version, $entity, bool $rescheduledUpdate)
     {
         $newTemporary = $version->getRowId() === null;
-        $permanentToTemporary = $update->getRollbackId() && $version->getUpdatedIn() !== $update->getRollbackId();
+        $permanentToTemporary = !$update->getRollbackId() || (int)$version->getUpdatedIn() !== (int)$update->getRollbackId();
         //Creating new rollback if the staged updated is a new temporary update,
         //or it was rescheduled:
         //Start date was moved
diff --git a/vendor/magento/module-staging/Model/Operation/Update/CampaignIntegrity.php b/vendor/magento/module-staging/Model/Operation/Update/CampaignIntegrity.php
index 496f4b820c..655342559d 100644
--- a/vendor/magento/module-staging/Model/Operation/Update/CampaignIntegrity.php
+++ b/vendor/magento/module-staging/Model/Operation/Update/CampaignIntegrity.php
@@ -68,7 +68,7 @@ class CampaignIntegrity
         $entityType = $this->typeResolver->resolve($entity);
         //The update doesn't have a rollback (it's a permanent update or it's rollback ID isn't equal to is't updatedIn
         //(it's a permanent update made temporary)
-        if (!$update->getRollbackId() || $version->getUpdatedIn() !== $update->getRollbackId()) {
+        if (!$update->getRollbackId() || (int)$version->getUpdatedIn() !== (int)$update->getRollbackId()) {
             $processor = $this->permanentUpdateProcessorPool->getProcessor($entityType);
             $processor->process($entity, $update->getId(), $update->getRollbackId());
         }
diff --git a/vendor/magento/module-staging/Model/SynchronizeEntityPeriod.php b/vendor/magento/module-staging/Model/SynchronizeEntityPeriod.php
index a2bd0fcb27..140f5b33e2 100644
--- a/vendor/magento/module-staging/Model/SynchronizeEntityPeriod.php
+++ b/vendor/magento/module-staging/Model/SynchronizeEntityPeriod.php
@@ -6,16 +6,16 @@
 
 namespace Magento\Staging\Model;
 
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Api\FilterBuilder;
 use Magento\Framework\Api\SearchCriteriaBuilder;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\EntityManager\MetadataPool;
+use Magento\Framework\EntityManager\TypeResolver;
 use Magento\Framework\Model\Entity\RepositoryFactory;
 use Magento\Framework\Registry;
 use Magento\Staging\Api\UpdateRepositoryInterface;
-use Magento\Staging\Model\StagingList;
 use Magento\Staging\Model\VersionManager\Proxy as VersionManagerProxy;
-use Magento\Staging\Model\EntityStaging;
 use Magento\Staging\Model\Entity\RetrieverPool;
 use Magento\Staging\Model\ResourceModel\Db\CampaignValidator;
 
@@ -81,20 +81,25 @@ class SynchronizeEntityPeriod
     private $campaignValidator;
 
     /**
+     * @var TypeResolver
+     */
+    private $typeResolver;
+
+    /**
      * SynchronizeEntityPeriod constructor.
      *
      * @param RepositoryFactory $repositoryFactory
-     * @param \Magento\Staging\Model\StagingList $stagingList
+     * @param StagingList $stagingList
      * @param MetadataPool $metadataPool
      * @param VersionManagerProxy $versionManager
      * @param UpdateRepositoryInterface $updateRepository
      * @param FilterBuilder $filterBuilder
      * @param SearchCriteriaBuilder $searchCriteriaBuilder
      * @param Registry $registry
-     * @param \Magento\Staging\Model\EntityStaging $entityStaging
+     * @param EntityStaging $entityStaging
      * @param RetrieverPool $retrieverPool
      * @param CampaignValidator $campaignValidator
-     *
+     * @param TypeResolver|null $typeResolver
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
@@ -108,7 +113,8 @@ class SynchronizeEntityPeriod
         Registry $registry,
         EntityStaging $entityStaging,
         RetrieverPool $retrieverPool,
-        CampaignValidator $campaignValidator
+        CampaignValidator $campaignValidator,
+        TypeResolver $typeResolver = null
     ) {
         $this->repositoryFactory = $repositoryFactory;
         $this->stagingList = $stagingList;
@@ -121,6 +127,7 @@ class SynchronizeEntityPeriod
         $this->entityStaging = $entityStaging;
         $this->retrieverPool = $retrieverPool;
         $this->campaignValidator = $campaignValidator;
+        $this->typeResolver = $typeResolver ?? ObjectManager::getInstance()->get(TypeResolver::class);
     }
 
     /**
@@ -182,7 +189,8 @@ class SynchronizeEntityPeriod
         foreach ($entityList as $entityId) {
             $this->versionManager->setCurrentVersionId($oldVersionId);
             $entity = $retriever->getEntity($entityId);
-            if (!($entity instanceof $entityType)) {
+            $realEntityType = $this->typeResolver->resolve($entity);
+            if ($realEntityType !== $entityType) {
                 throw new LocalizedException(__('Repository should return instance of %s'));
             }
             if (!$this->campaignValidator->canBeScheduled($entity, $newVersionId, $oldVersionId)) {
